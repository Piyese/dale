// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'storeroom/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5112606009138662767),
      name: 'Activity',
      lastPropertyId: const IdUid(8, 4964915402075511305),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2609281793139281970),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 194391181164271385),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5547315822543538218),
            name: 'cost',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1185343654908344879),
            name: 'projectId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 8504012592435988850),
            relationTarget: 'Project'),
        ModelProperty(
            id: const IdUid(5, 666172893498589213),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3491114767735814989),
            name: 'startDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1718132966359828530),
            name: 'daysTaken',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4964915402075511305),
            name: 'remarks',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2563928415631523287),
      name: 'Project',
      lastPropertyId: const IdUid(8, 2684881947725564355),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3261265804287046384),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1498354328410644799),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8334122915017147889),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 498781553012346104),
            name: 'size',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3393344571916945021),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8400093292686550301),
            name: 'complete',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4178349223921395751),
            name: 'totalCost',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2684881947725564355),
            name: 'costSoFar',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'activities', srcEntity: 'Activity', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 2563928415631523287),
      lastIndexId: const IdUid(1, 8504012592435988850),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Activity: EntityDefinition<Activity>(
        model: _entities[0],
        toOneRelations: (Activity object) => [object.project],
        toManyRelations: (Activity object) => {},
        getId: (Activity object) => object.id,
        setId: (Activity object, int id) {
          object.id = id;
        },
        objectToFB: (Activity object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final titleOffset = fbb.writeString(object.title);
          final remarksOffset =
              object.remarks == null ? null : fbb.writeString(object.remarks!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addInt64(2, object.cost);
          fbb.addInt64(3, object.project.targetId);
          fbb.addOffset(4, titleOffset);
          fbb.addInt64(5, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.daysTaken);
          fbb.addOffset(7, remarksOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Activity(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              startDate: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..cost =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..daysTaken =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16)
            ..remarks = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18);
          object.project.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.project.attach(store);
          return object;
        }),
    Project: EntityDefinition<Project>(
        model: _entities[1],
        toOneRelations: (Project object) => [],
        toManyRelations: (Project object) => {
              RelInfo<Activity>.toOneBacklink(
                      4, object.id, (Activity srcObject) => srcObject.project):
                  object.activities
            },
        getId: (Project object) => object.id,
        setId: (Project object, int id) {
          object.id = id;
        },
        objectToFB: (Project object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final titleOffset = fbb.writeString(object.title);
          final sizeOffset = fbb.writeString(object.size);
          final locationOffset = fbb.writeString(object.location);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, sizeOffset);
          fbb.addOffset(4, locationOffset);
          fbb.addBool(5, object.complete);
          fbb.addInt64(6, object.totalCost);
          fbb.addInt64(7, object.costSoFar);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Project(
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              size: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              location: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..complete =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false)
            ..totalCost =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16)
            ..costSoFar = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 18);
          InternalToManyAccess.setRelInfo<Project>(
              object.activities,
              store,
              RelInfo<Activity>.toOneBacklink(
                  4, object.id, (Activity srcObject) => srcObject.project));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Activity] entity fields to define ObjectBox queries.
class Activity_ {
  /// see [Activity.id]
  static final id = QueryIntegerProperty<Activity>(_entities[0].properties[0]);

  /// see [Activity.description]
  static final description =
      QueryStringProperty<Activity>(_entities[0].properties[1]);

  /// see [Activity.cost]
  static final cost =
      QueryIntegerProperty<Activity>(_entities[0].properties[2]);

  /// see [Activity.project]
  static final project =
      QueryRelationToOne<Activity, Project>(_entities[0].properties[3]);

  /// see [Activity.title]
  static final title =
      QueryStringProperty<Activity>(_entities[0].properties[4]);

  /// see [Activity.startDate]
  static final startDate =
      QueryIntegerProperty<Activity>(_entities[0].properties[5]);

  /// see [Activity.daysTaken]
  static final daysTaken =
      QueryIntegerProperty<Activity>(_entities[0].properties[6]);

  /// see [Activity.remarks]
  static final remarks =
      QueryStringProperty<Activity>(_entities[0].properties[7]);
}

/// [Project] entity fields to define ObjectBox queries.
class Project_ {
  /// see [Project.id]
  static final id = QueryIntegerProperty<Project>(_entities[1].properties[0]);

  /// see [Project.description]
  static final description =
      QueryStringProperty<Project>(_entities[1].properties[1]);

  /// see [Project.title]
  static final title = QueryStringProperty<Project>(_entities[1].properties[2]);

  /// see [Project.size]
  static final size = QueryStringProperty<Project>(_entities[1].properties[3]);

  /// see [Project.location]
  static final location =
      QueryStringProperty<Project>(_entities[1].properties[4]);

  /// see [Project.complete]
  static final complete =
      QueryBooleanProperty<Project>(_entities[1].properties[5]);

  /// see [Project.totalCost]
  static final totalCost =
      QueryIntegerProperty<Project>(_entities[1].properties[6]);

  /// see [Project.costSoFar]
  static final costSoFar =
      QueryIntegerProperty<Project>(_entities[1].properties[7]);
}
